# Generated by Django 2.0.5 on 2018-05-28 09:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('hukbun', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('jumin', models.CharField(blank=True, max_length=12, null=True)),
                ('course', models.CharField(blank=True, max_length=5, null=True)),
                ('state', models.CharField(blank=True, max_length=10, null=True)),
                ('variance', models.CharField(blank=True, max_length=10, null=True)),
                ('graduationCredit', models.CharField(blank=True, max_length=10, null=True)),
                ('major', models.CharField(blank=True, max_length=20, null=True)),
                ('advisor', models.CharField(blank=True, max_length=10, null=True)),
                ('currentGrade', models.CharField(blank=True, max_length=10, null=True)),
                ('compleSemester', models.CharField(blank=True, max_length=3, null=True)),
                ('earlyGraduation', models.CharField(blank=True, max_length=1, null=True)),
                ('admission', models.CharField(blank=True, max_length=10, null=True)),
                ('enginCertification', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Assignment', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('author', models.CharField(max_length=300)),
                ('publisher', models.CharField(max_length=100)),
                ('year_of_publication', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Core_Competence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Knowledge_application', models.CharField(max_length=5)),
                ('verification_ability', models.CharField(max_length=5)),
                ('problem_solving', models.CharField(max_length=5)),
                ('tool_utilization', models.CharField(max_length=5)),
                ('design_ability', models.CharField(max_length=5)),
                ('teamwork_skill', models.CharField(max_length=5)),
                ('communication', models.CharField(max_length=5)),
                ('understanding_of_influence', models.CharField(max_length=5)),
                ('responsibility', models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=15)),
                ('semester', models.CharField(max_length=15)),
                ('subjectCode', models.CharField(max_length=15)),
                ('subjectName', models.CharField(blank=True, max_length=50, null=True)),
                ('grade', models.CharField(blank=True, max_length=50, null=True)),
                ('eisu', models.CharField(blank=True, max_length=50, null=True)),
                ('score', models.CharField(blank=True, max_length=50, null=True)),
                ('professor', models.CharField(blank=True, max_length=50, null=True)),
                ('remarks', models.CharField(blank=True, max_length=50, null=True)),
                ('time', models.CharField(blank=True, max_length=50, null=True)),
                ('lectureRoom', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Learning_Objectives',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Core_competencies', models.CharField(max_length=10)),
                ('detailed_core_competencies', models.CharField(max_length=10)),
                ('reflectance', models.CharField(max_length=5)),
                ('learning_objectives', models.CharField(max_length=200)),
                ('performance_criteria', models.CharField(max_length=200)),
                ('achievement_goals', models.CharField(max_length=5)),
                ('evaluation_methods', models.CharField(max_length=10)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataParser.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Lecture_method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Lecture_type', models.CharField(max_length=100)),
                ('teaching_method', models.CharField(max_length=100)),
                ('educational_equipment', models.CharField(max_length=100)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataParser.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('hukbun', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='School_composition_ratio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Midterm_exam', models.CharField(max_length=10)),
                ('final_exam', models.CharField(max_length=10)),
                ('attendance', models.CharField(max_length=10)),
                ('assignments_and_others', models.CharField(max_length=10)),
                ('grading_division', models.CharField(max_length=10)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataParser.Course')),
            ],
        ),
        migrations.CreateModel(
            name='StudentGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eisu', models.CharField(blank=True, max_length=50, null=True)),
                ('certification', models.CharField(blank=True, max_length=50, null=True)),
                ('yearNsemester', models.CharField(blank=True, max_length=50, null=True)),
                ('subject_code', models.CharField(blank=True, max_length=50, null=True)),
                ('subject', models.CharField(blank=True, max_length=50, null=True)),
                ('score', models.CharField(blank=True, max_length=50, null=True)),
                ('grade_design', models.CharField(blank=True, max_length=50, null=True)),
                ('grade', models.CharField(blank=True, max_length=50, null=True)),
                ('valid', models.CharField(blank=True, max_length=50, null=True)),
                ('hukbun', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentHopeCareers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('careers', models.CharField(blank=True, max_length=50, null=True)),
                ('ranking', models.IntegerField()),
                ('job', models.CharField(blank=True, max_length=50, null=True)),
                ('Enterprise', models.CharField(blank=True, max_length=50, null=True)),
                ('Salary', models.CharField(blank=True, max_length=50, null=True)),
                ('Address', models.CharField(blank=True, max_length=50, null=True)),
                ('hukbun', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subject_desription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desription', models.CharField(max_length=1000)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataParser.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Weekly_course_contents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week', models.CharField(max_length=1)),
                ('contents', models.CharField(max_length=500)),
                ('methods', models.CharField(max_length=20)),
                ('related_materials', models.CharField(max_length=20)),
                ('assignments', models.CharField(max_length=200)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataParser.Course')),
            ],
        ),
        migrations.AddField(
            model_name='core_competence',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataParser.Course'),
        ),
        migrations.AddField(
            model_name='book',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataParser.Course'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataParser.Course'),
        ),
    ]
